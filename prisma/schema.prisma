// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// schema.prisma

model User {
  id             String      @id @default(cuid())
  name           String
  address        String?
  image          String?
  email          String?     @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  totalXp        Int?
  sessions       Session[]
  accounts       Account[]
  createdTasks        Task[]
  tasks          UserTasks[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String
  type        String
  duration    String
  experience  Int
  userId      String      @map("user_id")
  creator     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserTasks   UserTasks[]
}

model UserTasks {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  task      Task     @relation(fields: [taskId], references: [id])
  completed Boolean?
  User      User     @relation(fields: [userId], references: [id])
  taskId    String  @map("task_id")
}
